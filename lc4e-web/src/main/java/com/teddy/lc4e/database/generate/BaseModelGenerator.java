package com.teddy.lc4e.database.generate;

import com.jfinal.plugin.activerecord.generator.ColumnMeta;
import com.jfinal.plugin.activerecord.generator.TableMeta;

/**
 * Created by teddyzhu on 16/1/26.
 */
public class BaseModelGenerator extends com.jfinal.plugin.activerecord.generator.BaseModelGenerator {

    protected String classDefineTemplate =
            "/**%n" +
                    " * Generated by JFinal, do not modify this file.%n" +
                    " */%n" +
                    "@SuppressWarnings(\"serial\")%n" +
                    "public abstract class %s<M extends %s<M>> extends DBModel<M> implements IBean {%n%n";


    protected String importTemplate =
            "import com.teddy.jfinal.interfaces.DBModel;%n" +
                    "import com.jfinal.plugin.activerecord.IBean;%n%n";

    protected String fullFieldTemplate = "\tpublic static final String %s = \"%s.%s\";%n%n";
    protected String singleFieldTemplate = "\tpublic static final String %s = \"%s\";%n%n";

    protected String tableFieldTemplate = "\tpublic static final String ALL_FIELDS = \"%s.*\";\n" +
            "\tpublic static final String TABLE_NAME = \"%s\";";

    public BaseModelGenerator(String baseModelPackageName, String baseModelOutputDir) {
        super(baseModelPackageName, baseModelOutputDir);
    }


    @Override
    protected void genImport(StringBuilder ret) {
        ret.append(String.format(importTemplate));
    }


    @Override
    protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(classDefineTemplate, tableMeta.baseModelName, tableMeta.baseModelName));
    }

    @Override
    protected void genBaseModelContent(TableMeta tableMeta) {
        StringBuilder ret = new StringBuilder();
        genPackage(ret);
        genImport(ret);
        genClassDefine(tableMeta, ret);
        for (ColumnMeta columnMeta : tableMeta.columnMetas) {
            genSetMethodName(columnMeta, ret);
            genGetMethodName(columnMeta, ret);
            genFullField(tableMeta, columnMeta, ret);
            genSingleField(columnMeta, ret);
        }
        genTableField(tableMeta, ret);
        ret.append(String.format("}%n"));
        tableMeta.baseModelContent = ret.toString();
    }

    protected void genFullField(TableMeta tableMeta, ColumnMeta columnMeta, StringBuilder ret) {
        ret.append(String.format(fullFieldTemplate, columnMeta.name.toLowerCase(), tableMeta.name, columnMeta.name));
    }

    protected void genSingleField(ColumnMeta columnMeta, StringBuilder ret) {
        ret.append(String.format(singleFieldTemplate, columnMeta.name.toUpperCase(), columnMeta.name.toUpperCase()));
    }

    protected void genTableField(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(tableFieldTemplate, tableMeta.name, tableMeta.name));
    }
}
